#!/usr/bin/make -f

# # Enable for debugging purposes
# export DH_VERBOSE=1
# export DH_OPTIONS=-v

DPKG_EXPORT_BUILDFLAGS = 1
include /usr/share/dpkg/default.mk

export PACKAGE=$(shell dh_listpackages)
PKGBASE=$(CURDIR)/debian/${PACKAGE}
PREFIX=/usr/lib/${PACKAGE}

export RUBY=/usr/bin/ruby3.2
export GEM_PATH=vendor/ruby/3.2.0

export RUBYOPT="-W:no-deprecated -W:no-experimental"
export DEBIAN_DISABLE_RUBYGEMS_INTEGRATION=1


%:
	dh $@


override_dh_clean:
	dh_clean

	rm -rf .bundle
	rm -rf coverage
	rm -rf doc/_build
	rm -rf log/*
	rm -rf tmp/*
	rm -rf vendor/bundler
	rm -rf vendor/ruby


override_dh_auto_build:
	$(RUBY) -S gem install bundler \
		-v '~> 2.0' \
		--no-document \
		--install-dir $(GEM_PATH) \
		--bindir bin

	$(RUBY) -S bin/bundle install \
		--path vendor \
		--deployment \
		--frozen \
		--clean \
		--retry 3 \
		--shebang "${RUBY}" \
		--binstubs \
		--without development test integration

	# Rails binstub is the only one not working without manual patching
	# We cannot run `rails app:update:bin` as this generates a
	# binstub with wrong shebang and does not support bundle standalone mode.

	# Remove executable load from bundle binstub
	sed -i '/^load/d' bin/rails

	# Add rails inline application load code
	echo "APP_PATH = File.expand_path('../config/application', __dir__)" >> bin/rails
	echo "require_relative '../config/boot'" >> bin/rails
	echo "require 'rails/commands'" >> bin/rails

	# Clean up ruby gems cache
	rm -rf $(GEM_PATH)/cache

	$(RUBY) -S erb \
		prefix=${PREFIX} \
		version=${DEB_VERSION} \
		gempath=${PREFIX}/${GEM_PATH} \
		debian/${PACKAGE}.sh.erb > bin/${PACKAGE}


override_dh_link:
	dh_link -a

	# Symlink all configuration files from etc into rails config directory
	for cf in $$(cat debian/config); do \
		ln --symbolic /etc/${PACKAGE}/$$(basename $$cf) ${PKGBASE}${PREFIX}/config; \
	done;


override_dh_installsystemd:
	sed -i -e 's/$${PACKAGE}/${PACKAGE}/g' debian/*.service
	dh_installsystemd --no-start --no-restart-after-upgrade --no-enable --name=${PACKAGE}
	dh_installsystemd --no-start --no-restart-after-upgrade --no-enable --name=${PACKAGE}-unicorn
	dh_installsystemd --no-start --no-restart-after-upgrade --no-enable --name=${PACKAGE}-sidekiq
	dh_installsystemd --no-start --no-restart-after-upgrade --no-enable --name=${PACKAGE}-reporting
	dh_installsystemd --no-start --no-restart-after-upgrade --no-enable --name=${PACKAGE}-msgr
