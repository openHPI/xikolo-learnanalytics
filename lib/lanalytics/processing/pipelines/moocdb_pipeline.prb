unless Lanalytics::Processing::DatasourceManager.datasource_exists?('moocdb_postgresql')
  raise "Datasource 'moocdb_postgresql' is not available."
end

def create_moocdb_pipeline(processing_action, service, domain)
  service = service.downcase
  domain  = domain.downcase
  pa      = processing_action.to_s.downcase

  pipeline_for("xikolo.#{service}.#{domain}.#{pa}", :mooc_db, processing_action) do
    datasource = Lanalytics::Processing::DatasourceManager.datasource('moocdb_postgresql')

    extractor Lanalytics::Processing::Extractor::AmqEventExtractor.new(domain)

    transformer Lanalytics::Processing::Transformer::AnonymousDataFilter.new
    transformer Lanalytics::Processing::Transformer::MoocdbDataTransformer.new

    loader Lanalytics::Processing::Loader::PostgresLoader.new(datasource)
    # loader Lanalytics::Processing::Loader::Neo4jLoader.new(:moocdb_neo)
  end
end

# MOOCdb Pipelines for 'CREATE', 'UPDATE' und 'DESTROY'
def create_moocdb_pipelines_for_crud(service, domain)
  create_moocdb_pipeline(Lanalytics::Processing::Action::CREATE,  service, domain)
  create_moocdb_pipeline(Lanalytics::Processing::Action::UPDATE,  service, domain)
  create_moocdb_pipeline(Lanalytics::Processing::Action::DESTROY, service, domain)
end

create_action  = Lanalytics::Processing::Action::CREATE
update_action  = Lanalytics::Processing::Action::UPDATE
destroy_action = Lanalytics::Processing::Action::DESTROY

# ------------------- Account Service -------------------
create_moocdb_pipelines_for_crud(:account, :user)

# ------------------- Course Service -------------------
create_moocdb_pipelines_for_crud(:course, :course)
create_moocdb_pipelines_for_crud(:course, :item)
create_moocdb_pipelines_for_crud(:course, :enrollment)

# ------------------- Submission Service -------------------
create_moocdb_pipeline(create_action, :submission, :submission)

# ------------------- Learning Room Service -------------------
# create_moocdb_pipelines_for_crud(:learning_room, :learning_room)
# create_moocdb_pipeline(create_action, :learning_room, :membership)
# create_moocdb_pipeline(destroy_action, :learning_room, :membership)

# ------------------- Pinboard Service -------------------
create_moocdb_pipeline(create_action, :pinboard, :question)
create_moocdb_pipeline(update_action, :pinboard, :question)
# create_moocdb_pipeline(create_action, :pinboard, :subscription)
# create_moocdb_pipeline(destroy_action, :pinboard, :subscription)
create_moocdb_pipeline(create_action, :pinboard, :answer)
create_moocdb_pipeline(update_action, :pinboard, :answer)
create_moocdb_pipeline(create_action, :pinboard, :comment)
create_moocdb_pipeline(update_action, :pinboard, :comment)

# ------------------- Web Service -------------------
create_moocdb_pipeline(create_action, :web, :exp_event)
