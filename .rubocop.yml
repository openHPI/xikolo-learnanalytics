plugins:
  - rubocop-performance
  - rubocop-rails
  - rubocop-rspec
require:
  - rubocop-factory_bot
  - rubocop-rspec_rails

AllCops:
  TargetRailsVersion: 7.2
  TargetRubyVersion: 3.4
  NewCops: enable
  Exclude:
    - 'bin/**'
    - 'db/schema.rb'
    - 'vendor/**'

# -----------------------------------------------------------------------------
#                                   RAILS

Rails:
  Enabled: true

#
# It's often easier to understand what explicit methods like "#append" and
# "#concat" actually do compared to operators like "<<" and "+" for arrays.
#
Rails/ActiveSupportAliases:
  Enabled: false

#
# False positives:
#   * On embedded models in migrations.
#
Rails/ApplicationRecord:
  Exclude:
    - 'db/**/*'

#
# To broken for other methods in non-Rails contexts
#
Rails/Delegate:
  Enabled: false

#
# Often when triggered it just wants to pass joined paths as separate
# arguments but that can hurt readability.
#
Rails/FilePath:
  Enabled: false

#
# False positives:
#   * Specs and migrations often need to update things without validations.
#
Rails/SkipsModelValidations:
  Exclude:
    - 'db/migrations/**.rb'
    - 'spec/**/*_spec.rb'

# -----------------------------------------------------------------------------
#                                   RSPEC

RSpec:
  Include:
    - 'spec/**/*_spec.rb'
    - 'spec/spec_helper.rb'
    - 'spec/rails_helper.rb'

RSpec/ContextWording:
  Enabled: false

RSpec/DescribeClass:
  Exclude:
    - spec/features/**/*_spec.rb
    - spec/requests/**/*_spec.rb

RSpec/ExampleLength:
  Enabled: false

RSpec/ExpectInHook:
  Enabled: false

RSpec/SpecFilePathFormat:
  Exclude:
    - 'spec/client/**/*_spec.rb'
  CustomTransform:
    OpenHPI: openhpi

RSpec/MessageSpies:
  Enabled: false

RSpec/MissingExampleGroupArgument:
  Enabled: false

RSpec/MultipleExpectations:
  Enabled: false

RSpec/NestedGroups:
  Max: 5

#
# TODO: We have too many specs with too many lets!
#
RSpec/MultipleMemoizedHelpers:
  Max: 52

# -----------------------------------------------------------------------------
#                                   Layout

Layout/ArgumentAlignment:
  EnforcedStyle: with_fixed_indentation

Layout/CaseIndentation:
  EnforcedStyle: end
  SupportedStyles:
    - case
    - end
  IndentOneStep: true

Layout/FirstArrayElementIndentation:
  EnforcedStyle: consistent

Layout/FirstHashElementIndentation:
  EnforcedStyle: consistent

Layout/LineLength:
  Exclude:
    - 'db/**/*'
    - 'spec/**/*'
    - 'config/**/*'
  Max: 120

Layout/MultilineMethodCallIndentation:
  EnforcedStyle: indented

Layout/SpaceInsideBlockBraces:
  EnforcedStyle: space
  EnforcedStyleForEmptyBraces: no_space
  SpaceBeforeBlockParameters: false

Layout/SpaceInsideHashLiteralBraces:
  EnforcedStyle: no_space

# -----------------------------------------------------------------------------
#                                    Lint

#
# False positives:
#   * expect { something }.to change { something } often triggers this
#
Lint/AmbiguousBlockAssociation:
  Exclude:
    - 'spec/**/*_spec.rb'

# -----------------------------------------------------------------------------
#                                   Metrics

Metrics/BlockLength:
  Exclude:
    - 'db/**/*'
    - 'spec/**/*'
    - 'config/**/*'
    - 'lib/lanalytics/metric/*.rb'
    - 'app/models/reports/**/*.rb'
    - 'Rakefile'
    - '**/*.rake'

Metrics/ClassLength:
  Max: 200
  Exclude:
    - 'lib/lanalytics/metric/*.rb'
    - 'app/models/reports/**/*.rb'

#
# Often used as a proxy for complexity in a method, but causes many false
# positives, e.g. when generating large, but simple, hashes.
# We want to rely on CyclomaticComplexity instead.
#
Metrics/MethodLength:
  Enabled: false

#
# Method calls add to this metric, but they are everywhere in Ruby, so this
# metric caused lots of what we would consider false positives.
#
Metrics/AbcSize:
  Enabled: false

Metrics/CyclomaticComplexity:
  Enabled: false

Metrics/PerceivedComplexity:
  Enabled: false

# -----------------------------------------------------------------------------
#                                   Style

#
# Both styles or mixtures are reasonable
#
Style/ClassAndModuleChildren:
  EnforcedStyle: compact
  Enabled: false

#
# Would be better but unlikely...
#
Style/Documentation:
  Enabled: false

#
# Okay for conditions, but false positive in return statements (e.g. APIs)
#
Style/DoubleNegation:
  Enabled: false

#
# Scripts might include on top-level
#
Style/MixinUsage:
  Exclude:
    - 'scripts/**/*'

Style/NumericPredicate:
  Enabled: false

Style/RaiseArgs:
  EnforcedStyle: compact

#
# Quick single line rescues in specs
#
Style/RescueModifier:
  Exclude:
    - 'spec/**/*_spec.rb'

#
# Quick single line rescues in specs
#
Style/RescueStandardError:
  # xikolo/lint#2
  Enabled: false
  Exclude:
    - 'spec/**/*_spec.rb'

#
# Often used pattern in chaining subjects in specs
#
Style/Semicolon:
  Exclude:
    - 'spec/**/*_spec.rb'

Style/SignalException:
  EnforcedStyle: only_raise

Style/TrailingCommaInArguments:
  EnforcedStyleForMultiline: comma

Style/TrailingCommaInArrayLiteral:
  EnforcedStyleForMultiline: comma

Style/TrailingCommaInHashLiteral:
  EnforcedStyleForMultiline: comma
