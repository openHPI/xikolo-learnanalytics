Lanalytics-Rails
=========================== 

A gem that integrate with the LAnalytics service and allows to track user event in a rails application. This is done by providing Javascript and Ruby helpers that can hook into the rails application. The gem helpers help you to track events very easily. But the gem is also tracking some events automatically.

An event can be broken down into 3 main parts: actor, verb and ressource. This way, we are able very flexible in defining and creating events, e.g. 'User (id:111) observed ressource (id:333, type: video)'

## Getting Started
- Include the gem 'lanalytics-rails' into the application's Gemfile `gem 'lanalytics-rails'`
  - When working on this gem, don't forget to include the path the dev folder of gem, see `gem 'lanalytics-rails',  path: '<path_to_gem_on_local_sys>'`


## Getting Started: Lanalytics in front end projects

- As mentioned, each tracking event consists of three main parts: actor, verb and ressource. In most cases, the actor will be the current user - the person that is currently logged in. Fir this case, the lanalytics gem gives also some help by providing an controller filter that will inject the current user in to javascript code for tracking event. To do this include the following lines into the `application_controller.rb`:
```
    include Lanalytics::LanalyticsControllerFilter
    before_filter :add_lanalytics_filter
```
- Now, let's track some events in the front end views. Depending on your use case, you can either use one of provided plugins from the lanalytics gem or you can build your own plugins for special cases, e.g. tracking events from a video player

## Provided tracking plugins from the lanalytics gem 

- StaticHtmlEventTracker


## Custom tracking plugins for your application
- ...

## Getting Started: Lanalytics for Backend
- Add `gem 'lanalytics-rails'` to the Gemfile
- Create `config/lanalytics.yml` to define Lanalytics setting
```
  # config/lanalytics.yml
  snapshot_handlers:
  - CourseSnapshotHandler
  - CourseItemSnapshotHandler

```
    
- `snapshot_handler`: Define a list a list of or a single snapshot handler; Details on SnapshotHandler can be found [here](#creating_snapshot_handlers) 

## Creating SnapshotHandler<a name="creating_snapshot_handlers"></a>
- SnapshotHandler created in `app/lanalytics/` folder
```
  # app/lanalytics/course_snapshot_handler.rb
  class CourseSnapshotHandler < Lanalytics::RessourceSnapshotHandler
    def current_ressource_snapshots
       courses_ressources = Course.all
       courses_ressources.map! do | course |
         lanalytics_course_model = { ressource_uuid: course.id }
         lanalytics_course_model.merge!(course.slice(*%w(title course_code start_date end_date)))
         lanalytics_course_model.with_indifferent_access
       end

       return self.new_ressource_snapshot_for_type_with_ressources('Course', courses_ressources)
    end
  end
```
- Result has to look like this
- You can also build relationships
  ```
    class CourseItemSnapshotHandler < Lanalytics::RessourceSnapshotHandler

      def current_ressource_snapshots
        item_ressources = Item.all
        #item_ressources = [Item.all.first]
        item_ressources.map! do | item |
          lanalytics_course_model = { ressource_uuid: item.id }
          lanalytics_course_model.merge!(item.slice(*%w(title content_type start_date end_date created_at updated_at)))
          lanalytics_course_model[:relationships] = [{
              :with_rel_type => 'BELONGS_TO',
              :to_ressource_type => 'Course',
              :to_ressource_uuid => item.section.course.id
          }]
          lanalytics_course_model.with_indifferent_access
        end

        return self.new_ressource_snapshot_for_type_with_ressources('Item', item_ressources)
      end
    end
  ```


