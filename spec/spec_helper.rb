# frozen_string_literal: true

# This file was generated by the `rails generate rspec:install` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# The generated `.rspec` file contains `--require spec_helper` which will cause this
# file to always be loaded, without a need to explicitly require it in any files.
#
# Given that it is always loaded, you are encouraged to keep this file as
# light-weight as possible. Requiring heavyweight dependencies from this file
# will add to the boot time of your test suite on EVERY test run, even for an
# individual file that may not need all of that loaded. Instead, make a
# separate helper file that requires this one and then use it only in the specs
# that actually need it.
#
# The `.rspec` file also contains a few flags that are not defaults but that
# users commonly want.
#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration

ENV['RAILS_ENV'] ||= 'test'

require 'webmock/rspec'

# Enabling coverage check during test run
require 'simplecov'
SimpleCov.start 'rails'

require File.expand_path('../config/environment', __dir__)
require 'rspec/rails'
require 'database_cleaner'
require 'rspec/its'
require 'sidekiq/testing'
require 'rspec/collection_matchers'
require 'paper_trail/frameworks/rspec'

require 'restify'
require 'restify/adapter/typhoeus'

Restify::Registry.store :test, 'http://lanalytics.xikolo.tld',
  adapter: Restify::Adapter::Typhoeus.new(sync: true)

Sidekiq::Testing.fake!

ActiveRecord::Migration.maintain_test_schema!
Dir[Rails.root.join('spec/support/**/*.rb')].each {|f| require f }

RSpec.configure do |config|
  config.raise_errors_for_deprecations!
  config.infer_spec_type_from_file_location!
  config.example_status_persistence_file_path = 'spec/examples.txt'

  config.before do
    stub_request(:any, /lanalytics\.xikolo\.tld/)
      .to_rack(Lanalytics::Application)
    stub_request(:any, /test\.host/)
      .to_rack(Lanalytics::Application)
  end

  config.around do |example|
    DatabaseCleaner.strategy = :transaction
    DatabaseCleaner.cleaning(&example)
  end

  config.before :all do
    DatabaseCleaner.clean_with :truncation
  end

  config.before :all do
    Sidekiq::Worker.clear_all
  end

  config.after :all do
    Msgr.client.stop delete: true
    Msgr::TestPool.reset
  end
end

RSpec::Sidekiq.configure do |config|
  config.warn_when_jobs_not_processed_by_sidekiq = false
end
